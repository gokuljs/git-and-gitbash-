git init :-
* The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made to the project.
* The git init command creates or initializes a new Git project, or repository. It creates a .git folder with all the tools and data necessary to maintain versions. This command only needs to be used once per project to complete the initial setup. For instance, the code block sets up the home folder as a new git repository.
* When you use git init and initialize a repo, you’re officially making a Git project and can now make use of all the git commands in the world! If you’re not inside of a git repo, you won’t be able to use git commands and the terminal will complain to you about it.


git status:-
* The git status command is used within a Git repository to its current status including the current commit, any modified files, and any new files not being tracked by Git.

Git Workflow:-
* A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
* A Staging Area: where you’ll list changes you make to the working directory
* A Repository: where Git permanently stores those changes as different versions of the project


//The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.

=============================================================================================
Blame. Git keeps track of who wrote what and made what changes in a project. 
This is called blame, and it’s not a bad thing like it might sound. It can be very useful to
 know who worked on a piece of code so you know who to talk to about it if it needs changing or 
if you’re curious about how it works.

Collaboration. Working on a team with other developers means, 
at least in part, knowing how to use Git. It allows you to work on the same project at 
the same time and not interfere with each other’s work. This is possible because of 
branching, which you’ll learn about soon.

=============================================================================================


git add:-

// git add command is used to add files to the staging area 




git diff:-

// git diff is used to check the diffrence between the current working directory and the staging area

syntax:-

git commit:-
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

git log :-
Often with Git, you’ll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with git log 


Reasons for using git log:-
* The output seen when running git log is the 40-character SHA, the author of that commit, the date and time of the commit, and the commit message.

* This is super helpful when you need to look back over the history of a piece of code for various reasons.

* What if you broke something in the code and wanted to see what past, working commits you have available to revert to?
 What if you want to make a new feature based on an older version of your code, but didn’t remember which commit you wanted to base it off of?
 It’s good to know this information is there so that when you’re developing, you have the peace of mind knowing that, as long as your commit messages were decent, you’ll have a safety net.
 And that’s really the main issue: bad commit messages. If you don’t write commits that concisely tell what happened in a commit, it won’t be of much use later when you run into trouble.

==========================================================================================
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits
========================================================================================


local repository:-
contents that are stored in your computer are called has local repository 

remote repository:-
the contents that are stored in github are called has remote repository

===========================================================================================
Backtracking Intro:-


How does Git backtracking differ from simply commiting the desired changes?


Backtracking differs in a few ways from making a new commit but there are two reasons that are important 
for up at this point. First, by backtracking instead of making new commits, 
we’re able to make small changes to our previous commits without cluttering our repository
 history with commit messages of similar to “forgot to add file X from my previous commit so
  doing that now.” Second, and very important, is the following (to quote ProGit):

head commit:-
In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.

syntax:-

git show HEAD


git checkout:-

You could rewrite the line how it was originally, but what if you forgot the exact wording? The command
will restore the file in your working directory to look exactly as it did when you last made a commit.

syntax:-
git checkout HEAD filename



git checkout is sometimes referred to as a “dangerous command”. This highlights that it has some gotcha aspects
 that you should be aware of when utilizing it. For now, it’s most important to understand that any local (in your w
 orking directory) changes that you’ve made to the file being checked out will be gone. Git will simply copy the most recently-committed 
 version of the file to your working directory, overwriting your copy. Therefore, it’s crucial that you avoid this command unless you absolutely 
 know that you don’t want your unsaved local changes. Keeping this consideration in mind while using this command will save you the grief of losing your progress
  when all you wanted was to take a peak at what the previous commit looked like.



==================================================================================
git reset :

Great! The files you’ve added to the staging area belong in the same commit.

What if, before you commit, you accidentally delete an important line to scene-2.txt? Unthinkingly, you add scene-2.txt to the staging area. The file change is unrelated to the Larry/Laertes swap and you don’t want to include it in the commit.

or 

now u added ur files to the staging Area by mistake u deleted or made changes in one of the file u added to staging Area we can use git reset to modify the staging area and commit the files 

===================================================================================


git reset 2:-  very important


Creating a project is like hiking in a forest. Sometimes you take a wrong turn and find yourself lost.

Just like retracing your steps on that hike, Git enables you to rewind to the part before you made the wrong turn. You can do this with:

This command works by using the first 7 characters of the SHA of a previous commit. 
For example, if the SHA of the previous commit is 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba,
 use:


 syntax:-  git reset commit_SHA


Before reset:

HEAD is at the most recent commit

After resetting:

HEAD goes to a previously made commit of your choice
The gray commits are no longer part of your project
You have in essence rewound the project’s history

============================================================================================

three different ways to backtrack in Git. 

Let’s take a moment to review the new commands:

git checkout HEAD filename: Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.



======================================================================================



GIT BRANCHING






