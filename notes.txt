git init :-
* The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made to the project.
* The git init command creates or initializes a new Git project, or repository. It creates a .git folder with all the tools and data necessary to maintain versions. This command only needs to be used once per project to complete the initial setup. For instance, the code block sets up the home folder as a new git repository.
* When you use git init and initialize a repo, you’re officially making a Git project and can now make use of all the git commands in the world! If you’re not inside of a git repo, you won’t be able to use git commands and the terminal will complain to you about it.


git status:-
* The git status command is used within a Git repository to its current status including the current commit, any modified files, and any new files not being tracked by Git.

Git Workflow:-
* A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
* A Staging Area: where you’ll list changes you make to the working directory
* A Repository: where Git permanently stores those changes as different versions of the project


//The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.

=============================================================================================
Blame. Git keeps track of who wrote what and made what changes in a project. 
This is called blame, and it’s not a bad thing like it might sound. It can be very useful to
 know who worked on a piece of code so you know who to talk to about it if it needs changing or 
if you’re curious about how it works.

Collaboration. Working on a team with other developers means, 
at least in part, knowing how to use Git. It allows you to work on the same project at 
the same time and not interfere with each other’s work. This is possible because of 
branching, which you’ll learn about soon.

=============================================================================================


git add:-

// git add command is used to add files to the staging area 




git diff:-

// git diff is used to check the diffrence between the current working directory and the staging area

syntax:-

git commit:-
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

git log :-
Often with Git, you’ll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with git log 


Reasons for using git log:-
* The output seen when running git log is the 40-character SHA, the author of that commit, the date and time of the commit, and the commit message.

* This is super helpful when you need to look back over the history of a piece of code for various reasons.

* What if you broke something in the code and wanted to see what past, working commits you have available to revert to?
 What if you want to make a new feature based on an older version of your code, but didn’t remember which commit you wanted to base it off of?
 It’s good to know this information is there so that when you’re developing, you have the peace of mind knowing that, as long as your commit messages were decent, you’ll have a safety net.
 And that’s really the main issue: bad commit messages. If you don’t write commits that concisely tell what happened in a commit, it won’t be of much use later when you run into trouble.

==========================================================================================
git init creates a new Git repository
git status inspects the contents of the working directory and staging area
git add adds files from the working directory to the staging area
git diff shows the difference between the working directory and the staging area
git commit permanently stores file changes from the staging area in the repository
git log shows a list of all previous commits
========================================================================================



